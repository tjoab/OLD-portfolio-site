{
    "componentChunkName": "component---node-modules-gatsby-theme-portfolio-minimal-src-templates-article-listing-index-tsx",
    "path": "/blog",
    "result": {"pageContext":{"articles":[{"banner":{"alt":"Blockchain","caption":"","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='660'%20height='400'%20viewBox='0%200%20660%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M108%20152l-24%2011c-6%204-6%206-6%2039%200%2031%200%2031%202%2033%203%203%2046%2022%2053%2024%204%200%2051-20%2055-24%202-2%202-2%202-34l-1-35c-2-3-50-24-55-24l-26%2010m197%200c-16%207-25%2011-26%2013l-3%203-1%2033%201%2034c2%202%2052%2024%2055%2024%202%200%2051-21%2053-23%203-3%203-68%200-71-2-2-50-23-54-23l-25%2010m196%200c-25%2011-28%2013-29%2020a511%20511%200%20002%2064c2%202%2050%2023%2053%2023%204%200%2052-21%2054-24%202-2%202-4%202-34l-1-35c-2-2-6-4-27-13l-28-11-26%2010m-193%204l-22%2010c-1%201%2044%2020%2046%2020a1059%201059%200%200043-21%20860%20860%200%2001-34-14l-11-5-22%2010m-181-7l-22%2010-17%207%2023%2010%2023%2010%2023-10%2022-10c-2-2-44-19-45-19l-7%202m153%2052v32l22%209%2024%2011c2%200%202-2%202-31v-31l-16-7-24-10-8-4v31m77-21l-23%2011-1%2031%201%2031%2024-11%2023-9v-63l-24%2010M84%20202v31l16%207%2023%2010%208%203v-62l-22-10-23-10c-2%200-2%202-2%2031m127-9c-6%206-2%2014%208%2016l6-1c1-2%202-2%204%200%204%203%2019%203%2022-1%203-3%204-8%201-12-2-3-13-6-15-3%200%202-1%202-3%200s-4-2-11-2c-9%200-9%200-12%203m197%200c-8%207%200%2017%2011%2016%204-1%203-4-1-3-8%201-13-7-8-11%203-3%2017-3%2019%200%202%202%202%205%201%208s1%204%203%201l1-6-1-4h6c8%201%2012%206%207%2011-3%203-17%203-20%200-2-2-2-3%200-9%201-3-2-2-4%201-1%204-1%207%202%2011%204%204%2020%203%2024-1%206-6%202-15-8-16l-7%201c0%202%200%202-2%200-4-3-20-3-23%201m-195%202c-5%205-1%2010%207%2011h6l-1-4%201-6c2-3%204-2%203%201-2%203-1%207%201%208%203%203%2017%203%2019%200%205-5%200-11-9-11-3%200-3%200-2%204%200%203%200%204-2%206-2%203-4%202-2-2%203-6%200-9-11-9-7%200-8%200-10%202'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/d82b44f85d22ba60115341563cc9a84b/bc51f/bc.png","srcSet":"/static/d82b44f85d22ba60115341563cc9a84b/41200/bc.png 165w,\n/static/d82b44f85d22ba60115341563cc9a84b/f979a/bc.png 330w,\n/static/d82b44f85d22ba60115341563cc9a84b/bc51f/bc.png 660w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/d82b44f85d22ba60115341563cc9a84b/322ad/bc.webp 165w,\n/static/d82b44f85d22ba60115341563cc9a84b/de3b3/bc.webp 330w,\n/static/d82b44f85d22ba60115341563cc9a84b/2b2b5/bc.webp 660w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<p>At this point in time, most people have heard of crypto currencies, but what exactly are they? Why did they come to be? What does it mean to have a Bitcoin? Well before we delve into these topics, I think we should naturally motivate them with an example because at the end of the day, the technical details underlying bitcoin/cryptocurrencies were derived from handling some pretty common problems!</p>\n<h2>A Basic System</h2>\n<p>Say that you wanted to keep track of payments between you and some of your friends. You could use a communal ledger and update it. For this system to work however, you need to trust your friends. But, if you can bring in a few <u><strong>cryptographic</strong></u> tools, you can actually create a system that circumvents the need for trust altogether! A system like this is called a cryptocurrency. Bitcoin was the first implemented example of a cryptocurrency, and now thousands if not hundreds of thousands have followed suit.</p>\n<p>But to start our motivating example, let's forget about cryptocurrencies for the time being.\nWe will consider some basic tools: <u><strong>ledgers and digital signatures</strong></u>. If you and your friends exchange money pretty frequently, paying your share of the dinner bill and such, it can be inconvenient to exchange cash all the time. Instead, you may keep a communal ledger to record the supposed transactions then settle with real money some time in the future.</p>\n<ul>\n<li>TJ pays George $20.00</li>\n<li>George pays Quinn $40.00</li>\n<li>etc.</li>\n</ul>\n<p>This ledger would be public and accessible to everyone, like on a website where you can go and add a new transaction. A glaring issue with this idea is that anyone can add a line. What is preventing me from adding <u><em>George pays TJ $1000</em></u> without George approving? Are we just blindly trusting that all the transactions posted by the sender are what they meant them to be?\nThis is where we introduce the first bit of cryptography: digital signatures. As with real signatures, the idea here is for George to add <em>something</em> to the transaction that proves they have seen it and approved of it. It also needs to be really difficult for someone to “forge” this signature. At first this seems impossible. At its root, a digital signature is just some string of bits, 0s and 1s, so you can just copy and paste them right? How are forgeries prevented?</p>\n<h2>Keys and Key Validation</h2>\n<p>The way this works is that everyone generates what’s called a <u><strong>public key/secret key pair</strong></u>, each of which looks like some string of bits. As the names suggest, the secret key is something you should keep to yourself. In the real world, your real signature looks the same no matter what. But a digital signature actually changes. Commonly, these signatures look like a string of 256 bits, i.e. a combination of 0s and 1s that is 256 numbers in length. Altering the message intended to be signed completely changes the “look” of your digital signature, and detecting the forgery becomes apparent.</p>\n<p>More technically, your digital signature is created by some function which takes in two inputs, the message to be signed and your secret key. The secret key ensures that only you can produce the signature and the fact that it depends on the message means no one can just copy one of your signatures to forge on another message.</p>\n<p>Alongside the function that creates your digital signature, comes a function that verifies your signature is valid. And yup you guessed it, this is where your public key plays a role. The details here are more complicated but in essence, this function returns a value, either true or false indicating whether the signature was created by the secret key associated with your public key. The idea is that it should be completely infeasible to find a valid signature if you don’t know the\nsecret key. That is, there is no better way to forge than just guessing and checking random signatures until you hit one that works.</p>\n<div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/6n5kDkX/Untitled-Artwork-28.png\" alt=\"signatures\" width=100%>\n</div>\n<p>With 256 bit signatures, there are 2<sup>256</sup>  possible signatures, and only one is valid. This is a stupidly large number. Consider</p>\n<p>100 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000 000.</p>\n<p>This number (that is 77 zeros by the way) is still smaller than 2<sup>256</sup>. I think it is safe to say that when you are verifying a signature present on a message with a given public key, it is near impossible for someone to have produced it without knowing the associated secret key. And since George is the only one who knows his secret key, we can be confident George actually signed this message. Perfect! We have now removed a huge dependence on trust from our system. But we are technically still working on an honor system since we need all the friends to actually settle the ledger balances on the agreed upon future date. What’s stopping me from borrowing a bunch of money from my friends, adding the transactions to the ledger and then never showing up to settle with cash?</p>\n<h2>Removing Cash Dependence</h2>\n<p>Before addressing this head on, let's think as to why someone would run off in the first place. Probably because they owe a lot of money. So what if we alter the system so we never actually have to settle up in cash. As long as we have some way to prevent people from spending too much more than they’ve taken, this system should work.</p>\n<p>Let’s quickly illustrate this. Say everyone starts off by paying $100 into the pot. So the first few lines of the ledger would be something like:</p>\n<ul>\n<li>TJ gets $100</li>\n<li>George gets $100</li>\n<li>Quinn gets $100</li>\n<li>etc.</li>\n</ul>\n<p>Now, we just reject any transaction in which someone is spending more than they have on the ledger. Extending the above ledger:</p>\n<ul>\n<li>TJ gets $100</li>\n<li>George gets $100</li>\n<li>Quinn gets $100</li>\n<li>TJ pays George $50</li>\n<li>TJ pays Quinn $50</li>\n</ul>\n<p>So far, all transactions have been signed and verified. Continuing:</p>\n<ul>\n<li>TJ gets $100</li>\n<li>George gets $100</li>\n<li>Quinn gets $100</li>\n<li>TJ pays George $50</li>\n<li>TJ pays Quinn $50</li>\n<li>TJ pays George $25</li>\n</ul>\n<p>Now this last transaction is invalid and would appear as if it was never signed in the first place. Notice that in order for this idea to work, we need to know the full history of the transactions in order to verify that the newly added one is indeed valid. Further notice that with this system the need for real cash is eliminated altogether. In theory, if everyone in the world used this ledger, you could live your whole life sending and receiving money on it. For this reason, we will start calling these quantities <u><strong>ledger dollars</strong></u> or LDs.</p>\n<p>At this point, I think I can lay it out for you guys. Bitcoin, or any other cryptocurrency, is a ledger; that is, the history of the transactions <u><strong>is</strong></u> the currency. So in the above example, the so called LDs would be Bitcoins.</p>\n<h2>How Can We All Come to Consensus?</h2>\n<p>Thus far, our system is stored in some public place like a website. But this requires trusting a central location. Namely, who hosts that website? Who controls the rules of adding new lines?\nTo circumvent this, we’ll have everyone keep their own copy of the ledger. Then to make a transaction like <u><em>Quinn pays George 25 LDs</em></u>, you broadcast it into the world for others to head and record on their own private ledgers. But we can quickly start poking at some issues with this idea. How does everyone agree on what the “right” ledger is? How do we know if everyone has received or heard a broadcasted transaction? If I received 10 LDs from someone, I really want to be sure that everyone heard that because I want to be able to spend those 10 LDs. Even more so, how can we be sure that everyone has recorded the transactions in the same order? If I spent the 10 LDs because on my ledger I had received them first, but on other ledgers I received them after my expenditure, my transaction would be invalid! We have an interesting puzzle on our hands.</p>\n<div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/9ZT0KdV/Untitled-Artwork-29.png\" alt=\"broadcast\" width=100%>\n</div>\n<p>Can we come up with a protocol for how to accept or reject transactions and in what order so that we can feel confident that anyone else in the world following the same protocol has a personal ledger that looks the same as yours? This is exactly what the original Bitcoin paper addressed. From a superficial level, the solution that Bitcoin offers is to trust whichever ledger has had the most computational work put into it. This probably doesn't make much sense at the moment, but I’ll try my best to try to explain what is meant by this. The general idea is that if you use computational work as a basis for what to trust, you can make it so that fraudulent transactions and conflicting ledgers would require an infeasible amount of computation to perform said fraud. In order to proceed, I need to introduce something called a <u><strong>cryptographic hash function</strong></u>. In general, a hash function takes in any kind of message or file, and outputs a string of bits with a fixed length, like 256 bits. This output is called the “hash” of the message, and it’s meant to look random. But it’s not random; it always gives the same output for a given input. The most important property of a hash function is that when you slightly change the input, even by just one character, the resulting hash changes completely.</p>\n<div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/ssV6Gxs/Untitled-Artwork-30.png\" alt=\"sha\" width=100%>\n</div>\n<p>The “cryptographic” part of a “cryptographic hash function” ensures that reverse engineering the original message from its hash is infeasible, i.e. there is no better method than to guess and check all 2<sup>256</sup> possibilities. A commonly used function that satisfies these criteria is SHA256.</p>\n <div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/425tWrG/Untitled-Artwork-31.png\" alt=\"shaRev\" width=100%>\n</div>\n<h2>Proof of Work</h2>\n<p>So how does a cryptographic hash function prove that <u><strong>this</strong></u> list of transactions have undergone a larger amount of computational effort over <u><strong>that</strong></u> list? Imagine someone shows you a list of transactions, and then they say “I found a special number so that when you put this number at the end of the list of transactions, and apply SHA256 to the whole thing, the first 30 bits of the output hash are zeros”. How hard do you think it was for them to find that number? For a random message, the probability that the hash happens to start with 30 successive zeros is 1 in 2<sup>30</sup>, which is about 1 in a billion. Because SHA256 is a cryptographic hash function, the only way to find a special number like this is by guess and check. So this person almost certainly had to go through about a billion different numbers before finding this special one. To verify their claim, you just add their proposed special number to the list they gave you and apply SHA256 to it. You can verify that amount of work was done, without performing the work yourself. This is called <u><strong>proof of work</strong></u>.</p>\n <div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/fxsGLQx/Untitled-Artwork-33.png\" alt=\"proofOfWork\" width=100%>\n</div>\n<p>Returning back to the broadcasting of ledger transactions, how are we going to make sure everyone agrees on what the correct ledger really is? With Bitcoin, we trust the ledger that has had the most work put into it. The way this works is to first organize a given ledger into <u><strong>blocks</strong></u>, where each block consists of a list of transactions, together with a proof of work. That is, a special number so that the hash of the whole block starts with a bunch of zeros.</p>\n <div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/rxF33rp/Untitled-Artwork-32.png\" alt=\"blocks\" width=100%>\n</div>\n<p>In the same way that a transaction is only considered valid if it is signed by the sender, a block is only considered valid if it has a proof of work. Also, to make sure there is a standard way to order these blocks, we’ll make it so that a block has to contain the hash of the previous block. That way, if you change any block, or try to swap the order of two blocks, it would change the block after it, which changes that block’s hash, which changes the next block, and so on. That would require redoing all the work, finding a new special number for each of these blocks and that’s no fun. Because blocks are chained together like this, instead of calling it a ledger, this is commonly called a <u><strong>blockchain</strong></u>.</p>\n <div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/fHpXDck/Untitled-Artwork-34.png\" alt=\"blockchain\" width=100%>\n</div>\n<h2>\"Mining\"</h2>\n<p>In our friend example that was then extended to the rest of the world, we’ll allow anyone to be a <u><strong>block creator</strong></u>. This means that they’ll listen for the transactions being broadcast, collect them into a block, then do a whole bunch of work to find the special number that makes the hash of that block start with many zeros, and broadcast out the block they found. To reward a block creator for all this work, when the block is out together, we’ll allow the creator to include a special transaction at the top which says that they receive, let's says 10 LDs, out of thin air. This is called the block reward. Creating blocks is often called <u><strong>mining</strong></u>, since it requires a lot of work, and it introduces new bits of currency into the economy. From the miners perspective, each block is like a miniature lottery, where everyone is guessing numbers as fast as they can until one lucky individual finds one that makes the hash of the block start with many zeros, and gets rewarded for doing so.</p>\n<h2>Decentralized Consensus</h2>\n<p>So now in our system, we just listen to these blocks being broadcasted by miners and update our personal copy of the ledger / blockchain. If a conflict arises where two different blockchain are broadcasted with conflicting transactions, you defer to the longer one, since it has the most work put into it. But what if they are both the same size? Easy. Just wait until you hear of an additional block that makes one longer. So even though there is no central authority, and everyone is maintaining their own copy of the blockchain, if everyone agrees to give preference to whichever blockchain has the most work put into it, we have a way to arrive at decentralized consensus between everyone in the world.</p>\n<p>I think to really illustrate how this system works and highlight its trustworthiness, let’s run through an example where we try to fool someone. Suppose I want to fool Quinn with a fraudulent block. I could try sending him one that includes a transaction saying I paid him 100 LDs, but then not broadcast it to the rest of the network. That way, Quinn thinks I paid him, and I still have my 100 LDs according to the rest of the network. To do this, I would need to find a valid proof of work before <u><strong>every other miner</strong></u>. And this could happen. But Quinn will still be hearing broadcasts made by other miners, so to keep him believing the fraudulent block, I would have to continue doing all the work to keep adding blocks to this special fork in Bob’s blockchain that’s different from what he’s hearing from the rest of the miners.</p>\n <div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/zXvJgfF/Untitled-Artwork-35.png\" alt=\"fraud\" width=100%>\n</div>\n<p>Remember, Quinn will always trust the longest chain he knows about. I may be able to keep this up for a few blocks by chance, continually finding valid proofs of work before all the rest of the miners on the network combined, but it's clear that the probability of maintaining this becomes astronomically miniscule, and in time, Quinn will reject what he’s heard from me in favor of the longer chain that everyone else is working on.</p>\n <div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/wdQ5cCF/Untitled-Artwork-36.png\" alt=\"consensus\" width=100%>\n</div>\n<p>Note that this means you shouldn’t necessarily trust a new block that you hear immediately. Instead, you should wait for several new blocks to be added on top of it, and only if you still haven’t heard of any longer blockchains can you trust that this block is part of the same chain everyone else is using.</p>\n<p>And with that we’ve covered, more or less, all the main ideas of cryptocurrency and proof of work systems like Bitcoin. But this is still far from a comprehensive coverage of cryptocurrencies. There are many nuances and alternate design choices I haven’t talked about here, like <u><strong>proof of stake</strong></u>—an alternative to proof of work—but hopefully this provides a good foundation in the topic and serves as a launchpad to further exploration in the space.</p>","categories":["Crypto"],"date":"May 15, 2022","description":"Have you ever wondering what a cryptocurrency really is under the hood? What really is a blockchain, and why we can trust what it says? I present a brief introduction to some of the technical aspects of cryptocurrencies.","id":"38d61bc3-3562-53e9-ba5e-8b69c3c4c4d3","keywords":["Cryptocurrency","Blockchain","Bitcoin","Hash function","Ledger","Trust"],"slug":"/what-is-a-cryptocurrency/","title":"What exactly is a cryptocurrency?","readingTime":{"text":"15 min read"}},{"banner":{"alt":"Incomplete hole","caption":"","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='660'%20height='400'%20viewBox='0%200%20660%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%2043a388%20388%200%20001%2049l-1%2012c0%2010%200%2011%202%2011%203%200%203%204%200%205-2%200-2%201-2%2012v11h3c3%200%203%200%203%202-1%203-5%204-5%201a4715%204715%200%20000%20223l-1%2016v15h41c39%200%2040%200%2040-2%200-1%201-2%203-2l2%202c0%202%201%202%2014%202h13v-2c0-2%201-3%203-3s2%201%202%203%200%202%206%202c5%200%205%200%205-2%200-3%200-3%203-3%202%200%202%200%202%203-1%202%200%202%204%202%203%200%204%200%204-2a2063%202063%200%2000240%202%204011%204011%200%2000260%200c4%200%205%200%205-2%200-1%201-2%203-2l2%202c0%202%201%202%204%202h5v-32c0-24-1-31-2-32v-5l1%202a4732%204732%200%20000-188c0%203-5%203-5%200s0-3%203-3h3v-23h-3c-3%200-3%200-3-2%200-3%200-3%203-3h3V91h-4c-4%200-4-4%201-5l3-1V0h-80a463%20463%200%2000-86%202c0-2-7-2-59-2h-59v2c-1%204-5%204-5%201s0-3-5-3c-4%200-5%200-5%202-1%203-5%203-5%200%200-2-1-2-5-2-5%200-6%200-6%202l-2%201-3-1c0-2-1-2-5-2l-5%201-2%201-3-1-5-1-6%201-2%201-3-1-5-1-5%201-2%201-3-1c0-2-10-1-10%201h-5c0-2-1-2-5-2s-5%200-5%202l-2%201-3-1c0-2-1-2-5-2s-5%200-5%202l-2%202c-2%200-3-1-3-2%200-2-1-2-5-2-6%200-6%200-5%203%200%202%200%202-2%202-3%200-3%200-3-2l1-3h-53c-46%200-52%200-52%202h-5c0-2-8-2-63-2H0v43m0%20197l1%2084c0-12%200-12%203-12l2-2c0-2%200-3-2-3H1v-82c-1-80-1-80-1%2015'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/676422c600379781980666744886e88b/91671/hole.jpg","srcSet":"/static/676422c600379781980666744886e88b/7e3b4/hole.jpg 165w,\n/static/676422c600379781980666744886e88b/47f88/hole.jpg 330w,\n/static/676422c600379781980666744886e88b/91671/hole.jpg 660w,\n/static/676422c600379781980666744886e88b/5aaff/hole.jpg 1320w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/676422c600379781980666744886e88b/322ad/hole.webp 165w,\n/static/676422c600379781980666744886e88b/de3b3/hole.webp 330w,\n/static/676422c600379781980666744886e88b/2b2b5/hole.webp 660w,\n/static/676422c600379781980666744886e88b/e36a7/hole.webp 1320w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<p>Consider the following sentence:</p>\n<p><u><strong>This statement is false.</strong></u></p>\n<p>If it's true, well then the statement is false. But if it's false, then the statement is true. So if it's not true and not false, what is it? We have an unresolvable paradox. This question seems like a pointless thought experiment but in the 20th century, this question was at the core of a heated debate amongst mathematicians, subsequently changing mathematics forever.</p>\n<h2>The Beginnings of Set Theory</h2>\n<p>This story actually starts a bit before then, in 1870. A German mathematician by the name of <u><strong>Georg Cantor</strong></u> has just published a paper that outlined a new branch of mathematics called <u><strong>set theory</strong></u>. A set is actually quite simple, it is just a well defined collection of <em>things</em>. The two shoes on your feet, a set. The collection of all planets, a set. All the even numbers, a set. A set can contain every<em>thing</em>, but could also contain no<em>thing</em>. In Cantor's case, he was concerned with sets that contained numbers, like the natural numbers or the <em>reals</em>. The natural numbers refer to the set of all positive integers, i.e. {1, 2, 3, 4, 5, ...}, whereas the real numbers refer to <strong>any</strong> number that can be expressed as a decimal; so things like fractions, π, or the square root of 2. Cantor thought to himself one day; \"are there more natural numbers... or real numbers between 0 and 1?\"</p>\n<h2>The Diagonalization Proof</h2>\n<p>Well to me and you, the answer seems obvious; both sets have an infinite amount of elements. And while that's true, Cantor did us one better. He approached the question in a simple manner. If he could list all of the natural numbers, and next to each one write a real number, then he would know that the two sets are of the same size. Suppose we've created such an infinite list. We're going to use each pair to construct a new real number that lays between 0 and 1. From the first pair, lets take the first digit to be the first digit of our new number. From the second pair, lets take the second digit to be the second digit of our new number, and so on. You may have noticed it; there's a glaring asterisk with this methodology. Our newly constructed number can't be on our list.</p>\n<div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/dKBtPfH/Untitled-Artwork-27.png\" alt=\"The Diagonalization Proof\" width=90%>\n</div>\n<p>By the procedure in which it was constructed, our number is different from the first number in the first decimal place, different from the second number in the second decimal place and so on down the list. It has to be different from every number on the list by at least one digit; the number on the diagonal. This was Cantor's <u><strong>diagonalization proof</strong></u>, not only was it quite clever, but it also shook up the world of mathematics, for Cantor has just shown that there are more real number between 0 and 1 than there are natural numbers extending out to infinty. Not all infinities are the same size. Cantor categroized these concepts as being <em>countably</em> infinite, or <em>uncountably</em> infinite.</p>\n<p>For a couple thousand years, Euclid's elements were considered the bedrock of the dicipline, but at the turn of the nineteenth century, Lobachevsky and Gaus discovered non-euclidean geometries prompting mathematicians to more closely examine the foundations of their field. The idea of a limit, at the heart of calculus, turned out to be poorly defined, and now Canter was showing that infinity itself was much more complex than anyone had imagined. In all this upheaval, mathematics fractured and a huge debate broke out among mathematicians. On one side were the <u><strong>intuitionists</strong></u>—convinced that math was a pure creation of the human mind and so infinities like Canter's weren't real—while on the other side were the <u><strong>formalists</strong></u>—believing that math could be put on an absolutely secure logical foundation through Cantor's set theory.</p>\n<h2>The Self-Referencing Paradox</h2>\n<p>One of the most famous formalists was highly influential German mathematician <u><strong>David Hilbert</strong></u>, truly, a living legend. Hilbert knew that Cantor's work was genius and was convinced that a more formal system of math based on Cantor's set theory could solve all of the issues that had cropped on in math over the last century. Most mathematicians agreed, but in 1901, logician <u><strong>Bertrand Russell</strong></u> pointed out something we have already discussed. Russell knew that if sets can contain anything, then obviously they could contain themselves. He pointed out a paradox that arises when we consider the set of all sets that <strong>don't</strong> contain themselves. If this set doesn't contain itself... well then it <strong>must</strong> contain itself. But if this set <strong>does</strong> contain itself, then it <strong>must not</strong> contain itself. Sound familar? This is the same pardox of self-reference we considered when examining \"this statement is false\".</p>\n<p>The formalists remedied the issue by redefining some things but self-reference refused to die quite that easily.</p>\n<h2>Hilbert's Questions</h2>\n<p>Hilbert went on to continue his quest of developing a new system for mathematical proofs. At the core, his idea was nothing new, in fact, it dates back to the ancient Greeks. The system relied on <u><strong>axioms</strong></u>—simple undeniable rules or buidling blocks to be rearranged, put together and ultimately build incredible structure. This building and rearrangement process follows the rules of inference and is called a <u><strong>theorem</strong></u>. The blueprints detailing how the structure was build is the <u><strong>proof</strong></u>. With this <em>axiomatic</em> system, mathematical claims can be proved or disproved with total certainty.</p>\n<p>Hilbert desired a formal system just like this, but built with <em>symbols</em>. He wanted to express the axioms of mathematics as symbolic statements and set up rules for symbol manipulation. In 1913, the <em>Principia Mathematica</em> was published, providing the world with a formal system of symbolic logical. Unlike ordinary language, symbols left no room for errors or fuzzy logic to creep in, and most importantly, <strong>it allowed you to prove properties of the formal system itself</strong>. Hilbert had three big questions. <u><strong>Is math complete</strong></u>—meaning every true statement can be proven true. <u><strong>Is math consistent</strong></u>—meaning the system is free from contradictions. And <u><strong>is math decidable</strong></u>—meaning is there a way to always determine whether a statement follows from the axioms, i.e. is true. Hilbert was convinced that the answer to all three of these questions was yes.</p>\n<ol>\n<li>Completeness</li>\n<li>Consistency</li>\n<li>Decidable</li>\n</ol>\n<p>I think that intuitively, the first and third questions are straightforward. The second question, a bit more... <em>abstract</em>. I think that consistency is best understood by an example. Suppose our system <strong>is not</strong> consistent, i.e. condradictions exist. Then we can prove that \"the sky is blue\" and that \"the sky is not blue\" are both true. Now consider a third arbitrary statement, \"dragons exist\". In this inconsistent system, we can prove that \"dragons exist\". Using the <strong>OR</strong> operator, (\"the sky is blue\" OR \"dragons exist\") is true since we have already proved that \"the sky is blue\" is true. But the \"the sky is blue\" is also false since we know that \"the sky is not blue\" is true. So in our OR statement, the first part is false... but the whole statement is true since we already proved that earlier. Then it <strong>must</strong> be the case that \"dragons exist\" is true.</p>\n<p>With an inconsistent system, <em>anything</em> can be proved true; so it's useless to us.</p>\n<h2>The Incompleteness Theorem &#x26; The Halting Problem</h2>\n<p>At a major conference in 1938, Hilbert gave a passionate speech about these questions and concluded his talk with the famous words, \"we must know, we will know\". But even as Hilbert was giving this speech, his dream was already crumbling.\nDays prior to this meeting, 24-year-old logician <u><strong>Kurt Gödel</strong></u> had discovered the answer to Hilbert's first question. He had proven that a complete formal system of mathematics could not exist; mathematics has intrinsic limitations. Despite the huge discovery, no one paid much attention to Gödel. That is, not until he published his proof to <u><strong>the Incompleteness Therorem</strong></u>. This time, everyone including Hilbert noticed.</p>\n<p>The premise behind Gödel's proof was to encode mathematical statements with numbers, so-called Gödel numbers. You can imagine there to be quite a few Gödel numbers, so in some instances Gödel used letters to represent really large Gödel numbers. After some time playing around with mathematical statements, Gödel found a statement that said \"there is no proof for the statement with Gödel number g\". This seems reasonable, but the caveat was that this statement was encoded by Gödel number g. <strong>Self-reference makes its grand re-appearence</strong>. If the statement is false, then there exists a proof. But if there exists a proof, we get a contradiction with the statement. So then the statement must be true. There is no contradiction... but then there exists no proof. We just showed that this system contains true statements with no proof; the system is not complete. Hilbert was wrong.</p>\n<p>Despite this blow, Hilbert can likely console himself knowing that his other two questions could still be true... right? Well not quite, as Gödel strikes again with his second proof. This time, he's shown that a consistent system cannot prove its own consistency. So the best system we could hope for is one that is consistent—since an inconsistent system is useless—and incomplete—since a complete system does not exist. But even with such a system, its own consistency cannot be proven; so at any point in time, a contradiction <em>could</em> arise revealing that the system you've been using was inconsistent all along. How lovely.</p>\n<p>With Hilbert weeping, at least he could rest easy knowing that mathematics is decidable. But that would be a lie. In 1936, <u><strong>Alan Turing</strong></u> was able to answer Hilbert's third question after inventing the modern computer and investigated the famous <u><strong>halting problem</strong></u>. With his proof, the undecidability of our mathematics system was cemented in history.</p>\n<h2>Mathematics is Fundementally Flawed</h2>\n<p>So what now? We're left to work in a system with the lingering possibility that it may be inconsistent and well, there's nothing we can do about it. Was all of this, for nothing? Quite the opposite actually.</p>\n<p>Turing's ideas about computability came from his concept of the Turing Machine which in turn arose from thinking about Hilbert's question. It's quite crazy to think that all modern computers stem from the weird paradoxes of self-reference, but it's true! Yes there is a hole at the bottom of mathematics. And yes this hole means that we will never know everything with certainty. And yes you may think this realization would have driven mathematicians mad and led to the disintegration of the entire field. But no. Instead, thinking about a simple comparison of size transformed the entire concept of infinity, changed the course of a World War and somehow has led directly to the invention of the device you're reading this on right now.</p>\n<p>It's easy to take a pessimistic view on mathematics after this reading, being fundementally flawed and all, but I think there's something beautiful about these holes and the journeys that result trying to patch them up. Its like chasing the rays of a rainbow, you know you'll never be able to reach them, but deep down inside, you still believe you can.</p>","categories":["Foundations of Mathematics","Math History"],"date":"May 09, 2022","description":"Mathematics is fundementally flawed. How did ideas about infinity lead to the break down of mathematics, the invention of the computer, and helped win a World War? A tale of incompleteness.","id":"c68b9401-9ae2-53fe-84c0-49735f945752","keywords":["Incompleteness","Set theory","Self-reference paradox","Cantor","Hilbert","Gödel"],"slug":"/mathematics-is-flawed/","title":"Mathematics is Flawed - Incompleteness","readingTime":{"text":"10 min read"}},{"banner":{"alt":"Lorenz attractor","caption":"Lorenz attractor depicted in the xz-plane rotated 45 degrees in the y-direction.","src":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","placeholder":{"fallback":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='660'%20height='400'%20viewBox='0%200%20660%20400'%20preserveAspectRatio='none'%3e%3cpath%20d='M0%20200v200h103c81%200%20103%200%20102-1-51-33-80-62-104-105a165%20165%200%2001-16-37l-8-25c-8-37-2-62%2010-48%205%205%2012%2019%2022%2040%207%2017%207%2017%2021%2020%2035%206%2078-14%20109-53%2013-16%2014-17%2016-32s6-32%207-32l-2%2010-5%2029c0%204%202-4%205-17A224%20224%200%2001361%200H0v200M365%202l-4%203-1%201h-1l-1%201-2%201-3%201-1%201-9%207a203%20203%200%2000-58%2072l7-9%206-9a233%20233%200%200151-48l-8%207c-8%206-20%2018-18%2018l-1%201-7%2011-1%201v4l-2%202-4%206c-5%207-6%2010-3%207s2-1-1%203c-4%203-11%2013-10%2014l3-4c3-4%204-4%206-4v-1h1v-2c1%201%203-1%205-3l5-3%2010-9c10-9%2021-18%2022-17l-5%205c-6%204-6%206%200%202%207-4%208-2%200%203-15%209-29%2023-30%2029l-1%204c-3%204-1%203%204-2%2025-26%2064-41%2096-38%2010%201%2019%203%2018%204l1%201c4%200%205%200%204%201l2%201h3l1%201c-1%201%209%206%2011%205v1c-1%200-1%201%201%202%202%202%201%201-9-4-13-6-23-8-39-8s-27%202-30%205l-2%202h3c6-2%2028-2%2034-1l3%201-2%201%201%201h-7c-8%200-27%202-26%203h6c10%200%2028%203%2041%208%2011%205%2034%2021%2029%2021l-3-3c-4-3-15-11-22-14a96%2096%200%2000-74%201l-6%203h-1l-2%201h-1v2h-2l-2%203c-3%203-3%203-1%203l3-1-3%202c-3%203-2%203%205-1%2012-5%2016-5%205%201a62%2062%200%2000-13%208c-2%201-3%203-2%203h-2v3l-2%201v1l-4%202a100%20100%200%2000-19%2019l-2%202-1%202-3%202-4%206c-4%203-4%204-1%203l2-1%203-4%203-4%201-1h1l2-1-8%2010-19%2021-9%2011-1%2010a157%20157%200%20003%2042c1%2011%208%2030%2016%2041%205%206%2015%2017%2017%2017l6-9%2033-47c24-30%2047-41%2060-28%204%204%2010%2014%2010%2017l1%201v1l1%202c1%200%202%202%201%207%200%208%202%2016%203%2013l-1%208c0%202%200%202%201%201%202-2%201%200-1%205v5c0%202%200%202-1%201s-1-1-1%201c0%203-6%2012-14%2022-10%2010-9%2011%202%200%2013-14%2023-31%2028-50%202-9%202-11%202-28l1-18%201%209%201%208-1-9c-1-21-11-42-26-52-11-7-16-8-31-8-14%200-15-1-2-3%207%200%2017%201%2026%205%208%203%2013%206%2012%207l1%201h1v1l3%201%201%202v1h1c2-2%2011%2012%2016%2023%206%2015%207%2036%204%2054-1%205-2%2010-1%2011h-1c-1-1-1-1-1%201%201%203-5%2018-11%2028-12%2020-25%2034-43%2046-7%205-7%205-5%206h5l6-2c2%200%202%200%201%201l-5%203c-5%201-5%201-4%202h-1c-2-1-7%200-8%201l4%201c4-1%206%200%202%202l-1%201-1%201c-1-1-4%200-6%201l-3%201h5c9-1%2028-13%2042-27l10-9-7%209c-4%203-5%207-2%206%202-1%201%200-2%204s-2%204%207-2c24-17%2042-42%2054-73a278%20278%200%2001-28%2056l15-18%204-5c3%200%203%200-2%206-7%2012-16%2022-27%2032-8%206-8%209-1%204%2021-14%2045-47%2055-77l3-7c2%201-4%2016-12%2032-24%2049-70%2081-116%2081l-9%201h-3l3%202h-5l-8-2c-9%200-21-6-23-12l-7-7-15-11-8-8-2%204-2%204%204%206a88%2088%200%200020%2019c5%205%2016%2012%2021%2015%203%201%203%201%201%201-3%200-2%201%202%201%207%201%2010%203%206%204a381%20381%200%20010%202%20135%20135%200%2001-55-45c-2-3-12%2023-12%2032%200%2020%2024%2032%2060%2030%206%200%207%200%204%201-6%202-30%201-38-1-22-6-29-13-29-30v-7l1%206c1%206%201%206%201-3-1-9-1-9%205-20l5-11-5-8a313%20313%200%2001-16-31l-3-1c-3-2-4-2-3%202%200%206-2%204-3-5-4-19-4-18-6-16l-4%208c-2%205-2%205-1%201%200-6-2-4-4%202a529%20529%200%2001-12%2027l5-17-1%201-2%203-7%2012c-7%2012-8%2012-2%200%204-10%205-13%202-9l-2%202v-3c1-4%201-4-4%200-5%203-6%203-2-1%205-4%206-8%202-6a317%20317%200%2001-46%2026l1%201v3c1%200%201%201-1%201l-4%205-2%204%207%208a206%20206%200%200038%2035v-2c0-2%200-3%201-2%202%203%204%203%204%201%200-1%200-2-1-1l-1-1-2-7-2-10c0-3%200-3%201%201%202%209%2013%2027%2016%2025l1%201v1l5%202c5%205%207%204%202-1l-3-4-3-5c-8-10-11-23-8-34%200-4%201-2%201%207s0%2011%202%2016c10%2021%2035%2036%2072%2044a979%20979%200%2000105%201c-1%201%2036%201%20128%201h130V0h-84a439%20439%200%2000-87%200c-2%200%200%202%205%204l19%2015c0%201-4-1-7-5-10-7-20-13-23-12V1c1-1-16-1-57-1-56%200-58%200-61%202m-96%20144l-3%207c-3%204-4%2011-5%2020-1%204-1%204%201%203%203-5%205-10%207-19%202-11%202-17%200-11M85%20194l-1%201-1%201c-2%201%200%2010%203%2018%204%208%2023%2025%2026%2023l-18-36c-3-5-7-8-9-7m154%206c-30%2028-56%2043-82%2047a104%20104%200%2001-38-3c0%203%205%2010%207%2011%205%203%2028%202%2040-1a158%20158%200%200076-54c2-3%201-3-3%200m146%207c-17%204-34%2022-64%2067l-12%2020c7%205%2024%2010%2035%209%2029-3%2054-29%2055-55%201-12-1-14-9-18-3-1-3-1%202-1%205%201%206%201%207%205%209%2016-4%2046-26%2061l-7%205c-2%203-21%208-29%208-4%200-5%200-5%202-1%202%200%203%207%202%2038-1%2073-37%2073-75%201-21-12-34-27-30m-207%2070l-33%208h-2l2%201%202%201-2%202c-2%201-2%201%205%201%2011-1%2035-9%2031-10-1-1-1-1%201-2%203-1%204-3%202-3l-6%202m-8%2010l-19%205-5%201c0%201%204%208%206%209%200%201%2023-13%2025-16l-7%201m4%204a77%2077%200%2000-7%204l-11%208%206-1c1-2%203%200%201%201l-1%202c0%202%205%201%206%200%200-1%201-2%203-2l2-1-2-1c-2-1-2-1%200-1%201%201%203%200%206-4%204-4%204-6%200-4v-2c3-3%201-3-3%201m-39%2036v2c2%200%202%201%202%202-1%202%201%204%209%2013%203%204%204%204%205%203s1-1%201%201%2017%2018%2019%2018h1c-1%201%200%201%200%200%202%200%205%203%205%204l1%202%208%205a326%20326%200%200021%2015l4%204%201%201%202%201c1-1%202%200%202%201l6%201h7l-6-3c-28-15-59-42-78-64-6-7-7-8-10-6m242%2052c-7%202-5%203%209%204%2013%201%2031%200%2039-2l5-2-6%201-16%202-4-1h-3l-9%201-8-1c-2%200-2%200-1-1%202-2%201-2-6-1'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e"},"images":{"fallback":{"src":"/static/34a6d0cf8aca2e1063e1dafe780a06ed/91671/lorenz.jpg","srcSet":"/static/34a6d0cf8aca2e1063e1dafe780a06ed/7e3b4/lorenz.jpg 165w,\n/static/34a6d0cf8aca2e1063e1dafe780a06ed/47f88/lorenz.jpg 330w,\n/static/34a6d0cf8aca2e1063e1dafe780a06ed/91671/lorenz.jpg 660w,\n/static/34a6d0cf8aca2e1063e1dafe780a06ed/5aaff/lorenz.jpg 1320w","sizes":"(min-width: 660px) 660px, 100vw"},"sources":[{"srcSet":"/static/34a6d0cf8aca2e1063e1dafe780a06ed/322ad/lorenz.webp 165w,\n/static/34a6d0cf8aca2e1063e1dafe780a06ed/de3b3/lorenz.webp 330w,\n/static/34a6d0cf8aca2e1063e1dafe780a06ed/2b2b5/lorenz.webp 660w,\n/static/34a6d0cf8aca2e1063e1dafe780a06ed/e36a7/lorenz.webp 1320w","type":"image/webp","sizes":"(min-width: 660px) 660px, 100vw"}]},"width":660,"height":400}}}},"body":"<p>If you ever have been involved in the online math pop culture scene, you have probably come across a concept call <u><strong>the butterfly effect</strong></u>. Thats is, the flap of a butterfly's wings in the Amazon can cause a tornado in Texas. As you may have guessed, the cliché is quite superficial. What really is the butterfly effect? What is all the rage? Is it at all useful? Why should I care?</p>\n<p>To start exploring, we first need to take a brief look at some history.</p>\n<h2>Dynamics and Chaos</h2>\n<p>For most people, studying dynamics started and ended with highschool physics. You know, Newton's Law — F=ma. The core idea here is that once you had your system and initial conditions, you could just plug them in and predict the motion history of the particle forever into the future — the system is <u><strong>deterministic</strong></u>. This sounds too good to be true, and well that's because it is. With the advent of more powerful computers, scientists very quickly realized that seamingly simple dynamical systems, for which predicting the future appeared trivial, turned out to be quite unpredictable. The motion was <u><strong>chaotic</strong></u>.</p>\n<p>The most famous example of this occured in 1963 when meteorologist and mathematician <u><strong>Edward Lorenz</strong></u> derived a dynamical system to predict the weather. In his model, he had variables that represented many things like wind speeds, temperatures, humitidies, etc. One day he ran the simulation and then wanted to re-analyze some of the data from the end. Instead of restarting the simulation from the beginning, to save time, he started it from the middle and inputted the corresponding initial conditions from the data he already had from running the simulation earlier. The system is deterministic, so no harm is done by doing this, the final results should be identical to his previous results as the input conditions we used. To his surprise, the weather machine predicted completely different values. How could this be if the system was deterministic?</p>\n<p>The culprit: a rounded decimal number on the computer printout. When Lorenz restarted the simulation midway through, the initial condition he entered would be something like 0.506 where the unknown <u><strong>true</strong></u> value would have been 0.506127. Such a small difference was considered negligible at the time, but this was Lorenz's huge discovery. In some systems, small changes in initial conditions produced large changes in long-term outcome.</p>\n<div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/b7tpfNx/lorenz.png\" alt=\"lorenz\" width=65%>\n</div>\n<p>In the above image, we see the beautiful <u><strong>Lorenz attractor</strong></u>. Depicted is the trajectory history of two particles, a red one and a yellow one. The two particles start at near identical initial points, with only a 0.00001 difference. Initially the particles follow the same path on top of one another, but as time goes on, the two particle paths start to diverge and each particle plays out the rest of its history quite differently compared to its previous partner. Slowly, the paths of these particles start to create a unique surface and that is what we see here. It looks like a butterfly, hence the butterfly effect — deterministic sensitive dependence on initial conditions.</p>\n<p>There are plenty of deterministic systems, but not all of them behave this way. Why does the Lorenz system evolve in this manner? Clearly something inherent to the system caused this, but what?</p>\n<h3>Randomness vs. Chaos</h3>\n<p>In physical systems, the paragon of chaotic phenomena is <u><strong>turbulence</strong></u>. You know that type of airflow that makes your plane ride very unpleasant. A rising column of smoke, or eddies behind a boat are great examples of chaotic motion. But how does this differ from randomness, or are they similar?</p>\n<p>A <u><strong>random</strong></u> motion is characterized by truly unknown inputs. Contrasted with <u><strong>chaotic</strong></u> motion, where the inputs are exactly known. So then why is it that some deterministic systems behave all irregular? The answer lays in the structure of the system itself. In specific, whether or not the system is <u><strong>nonlinear</strong></u>.</p>\n<p>For most of us, our physics careers in highschool and university were centered around <u><strong>linear</strong></u> systems. This enviroment is idealized in order to make up problems for testing. In reality, nonlinear dynamics describe almost everything. So to return to the question of why only some deterministic systems behave irregularly... the behavior arises from the system's nonlinearities, if they exist. Not all nonlinear systems are chaotic. However a chaotic system is necessarily nonlinear.</p>\n<div style = \"display: flex; align-items: center; justify-content: center\">\n    <img src=\"https://i.ibb.co/QCJJBb5/lorenzEq.png\" alt=\"lorenzEq\" width=65%>\n</div>\n<p>The Lorenz system, shown above, is clearly nonlinear. This allows for the possibility of chaotic behvaiour. The sensitivity to initial conditions confirms the occurence of chaos.</p>\n<h4>But Is It Useful?</h4>\n<p>A great deal of excitement in nonlinear dynamics today is centered around the hope that the transition from ordered to disordered flow may be explained with relatively simple equations and models. The recognition that chaotic dynamics are inherent in many nonlinear phenomena has really created a sense of revolution in science and engineering today.</p>\n<p>At best, one would think of chaos as fascinating. At worst, a nuisance to be avoided. Nothing more, nothing less. But for the past 30 years, there have been some pretty ingenious uses for <u><strong>chaos theory</strong></u>.</p>\n<p>One application has been private/secret communications. Commonly, this task is performed by using some sort of code that is only known to the sender and receiver. The communications can be encrypted and decrypted using this code. The problem with this method is that your communications are only as secure as your encryption method, and modern technology has now made it very easy to crack codes quickly.</p>\n<p>This new form of encryption relies on the discovery of <u><strong>synchronized chaos</strong></u>. The details are facinating, and I will probably write something up on the topic in the future, but for the moment I'll share a brief top-down view. The basic idea is to \"mask\" our transmitted message with much louder chaos. If there were an outside listener trying to eavesdrop on our conversation, they would only hear the meaningless chaotic noise. But then wouldn't my intended reciever hear this same noise? Yes, but no. The reciever is made of an indetical chaotic circuit so that when the message is recieved, the chaos can be perfectly reproduced, or synchronized, and the mask can be subtracted off!</p>\n<p>Voila, chaotic encryption.</p>","categories":["Chaos Theory","Math History"],"date":"May 07, 2022","description":"What really is the butterfly effect? An intro to chaos theory, nonlinear dynamics and the Lorenz attractor.","id":"476a8391-eafa-5bc6-9c7a-0b6f7e0cca7b","keywords":["Chaos","Lorenz attractor","Butterfly effect","Nonlinear dynamics"],"slug":"/what-is-chaos-theory/","title":"The Butterfly Effect - Is It Useful?","readingTime":{"text":"6 min read"}}]}},
    "staticQueryHashes": ["1094019748","36698639"]}